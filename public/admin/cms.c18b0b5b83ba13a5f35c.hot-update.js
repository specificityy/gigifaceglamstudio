webpackHotUpdate("cms",{

/***/ "./src/components/Hexagon.js":
/*!***********************************!*\
  !*** ./src/components/Hexagon.js ***!
  \***********************************/
/*! exports provided: Hexagon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Hexagon", function() { return Hexagon; });
/* harmony import */ var _babel_runtime_helpers_esm_taggedTemplateLiteralLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/taggedTemplateLiteralLoose */ "./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.function.name */ "./node_modules/gatsby/node_modules/core-js/modules/es6.function.name.js");
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/styled-base */ "./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");






var _this = undefined,
    _jsxFileName = "/Users/specificityy/Projects/kaizen-farms/src/components/Hexagon.js";

(function () {
  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;
  enterModule && enterModule(module);
})();

function _templateObject3() {
  var data = Object(_babel_runtime_helpers_esm_taggedTemplateLiteralLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(["\n    // from {\n    //     transform: translate(-2%, 35%) rotate(-60deg) skewY(30deg);\n    // }\n\n    to {\n        transform: translateX(50%) rotate(-60deg) skewY(30deg);\n    }\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = Object(_babel_runtime_helpers_esm_taggedTemplateLiteralLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(["\n    // 0% {\n    //     transform: translate(0%, 70%) rotate(-60deg) skewY(30deg);\n    // }\n\n    100% {\n        transform: rotate(-60deg) skewY(30deg);\n    }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = Object(_babel_runtime_helpers_esm_taggedTemplateLiteralLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(["\n    // 0% {\n    //     transform: translate(-2%, 105%) rotate(-60deg) skewY(30deg);\n    // }\n\n    100% {\n        transform: translateX(50%) rotate(-60deg) skewY(30deg);\n    }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {
  return a;
};

 // eslint-disable-line

/** @jsx jsx */



var Hexagon = function Hexagon(_ref) {
  var children = _ref.children,
      name = _ref.name,
      props = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_3__["default"])(_ref, ["children", "name"]);

  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["jsx"])(react__WEBPACK_IMPORTED_MODULE_5___default.a.Fragment, null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["jsx"])(HexagonListItem, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, props, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 8,
      columnNumber: 9
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["jsx"])(Lid, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 9,
      columnNumber: 13
    }
  }, name), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["jsx"])(Tape, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10,
      columnNumber: 13
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["jsx"])(HexagonInner, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11,
      columnNumber: 13
    }
  }, children, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["jsx"])(BoxSide, {
    name: "box-side",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 13,
      columnNumber: 17
    }
  }))));
}; // padding = 1.15473441108545 * width

var HexagonListItem = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_4__["default"])("li", {
  target: "e1bqulo10",
  label: "HexagonListItem"
})(function (_ref2) {
  var reveal = _ref2.reveal,
      transitions = _ref2.theme.transitions;
  return /*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["css"])("position:relative;float:left;width:27.85714285714286%;padding:0 0 32.16760145166612% 0;list-style-type:none;overflow:hidden;visibility:hidden;margin-right:2%;& *{visibility:visible;}&:nth-of-type(6n + 4),&:nth-of-type(6n + 5),&:nth-of-type(6n + 6){margin-top:-3.9285714285%;margin-bottom:-3.9285714285%;}&:nth-of-type(6n + 1){margin-left:0.5%;}transform:rotate(-60deg) skewY(30deg);&:nth-of-type(1),&:nth-of-type(2),&:nth-of-type(3){z-index:60;", reveal ? "\n                      animation: " + transitions.duration.complex + "ms " + transitions.easing.easeInOutQuint + " forwards\n                          " + slideInFirstRow + ";\n                  " : '', "}&:nth-of-type(4),&:nth-of-type(5),&:nth-of-type(6){z-index:50;transform:translateY(-35%) rotate(-60deg) skewY(30deg);", reveal ? /*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["css"])("animation:", transitions.duration.complex, "ms ", transitions.easing.easeInOutQuint, " forwards ", slideInSecondRow, ";;label:HexagonListItem;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")) : '', "}&:nth-of-type(7),&:nth-of-type(8),&:nth-of-type(9){z-index:40;transform:translate(-2%,-70%) rotate(-60deg) skewY(30deg);", reveal ? /*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["css"])("animation:", transitions.duration.complex, "ms ", transitions.easing.easeInOutQuint, " forwards ", slideInFirstRow, ";;label:HexagonListItem;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")) : '', "}&:nth-of-type(10),&:nth-of-type(11),&:nth-of-type(12){z-index:30;transform:translateY(-105%) rotate(-60deg) skewY(30deg);", reveal ? /*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["css"])("animation:", transitions.duration.complex, "ms ", transitions.easing.easeInOutQuint, " forwards ", slideInFirstRow, ";;label:HexagonListItem;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcGVjaWZpY2l0eXkvUHJvamVjdHMva2FpemVuLWZhcm1zL3NyYy9jb21wb25lbnRzL0hleGFnb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkZxQiIsImZpbGUiOiIvVXNlcnMvc3BlY2lmaWNpdHl5L1Byb2plY3RzL2thaXplbi1mYXJtcy9zcmMvY29tcG9uZW50cy9IZXhhZ29uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuLyoqIEBqc3gganN4ICovXG5pbXBvcnQgeyBqc3gsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5cbmV4cG9ydCBjb25zdCBIZXhhZ29uID0gKHsgY2hpbGRyZW4sIG5hbWUsIC4uLnByb3BzIH0pID0+IChcbiAgICA8PlxuICAgICAgICA8SGV4YWdvbkxpc3RJdGVtIHsuLi5wcm9wc30+XG4gICAgICAgICAgICA8TGlkPntuYW1lfTwvTGlkPlxuICAgICAgICAgICAgPFRhcGUgLz5cbiAgICAgICAgICAgIDxIZXhhZ29uSW5uZXI+XG4gICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgICAgIDxCb3hTaWRlIG5hbWU9XCJib3gtc2lkZVwiIC8+XG4gICAgICAgICAgICA8L0hleGFnb25Jbm5lcj5cbiAgICAgICAgPC9IZXhhZ29uTGlzdEl0ZW0+XG4gICAgPC8+XG4pO1xuXG4vLyBwYWRkaW5nID0gMS4xNTQ3MzQ0MTEwODU0NSAqIHdpZHRoXG5jb25zdCBIZXhhZ29uTGlzdEl0ZW0gPSBzdHlsZWQubGlgXG4gICAgJHsoeyByZXZlYWwsIHRoZW1lOiB7IHRyYW5zaXRpb25zIH0gfSkgPT4gY3NzYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICB3aWR0aDogMjcuODU3MTQyODU3MTQyODYlO1xuICAgICAgICBwYWRkaW5nOiAwIDAgMzIuMTY3NjAxNDUxNjY2MTIlIDA7XG4gICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDIlO1xuXG4gICAgICAgICYgKiB7XG4gICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgJjpudGgtb2YtdHlwZSg2biArIDQpLFxuICAgICAgICAmOm50aC1vZi10eXBlKDZuICsgNSksXG4gICAgICAgICY6bnRoLW9mLXR5cGUoNm4gKyA2KSB7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAtMy45Mjg1NzE0Mjg1JTtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC0zLjkyODU3MTQyODUlO1xuICAgICAgICB9XG5cbiAgICAgICAgJjpudGgtb2YtdHlwZSg2biArIDEpIHtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwLjUlO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTYwZGVnKSBza2V3WSgzMGRlZyk7XG5cbiAgICAgICAgJjpudGgtb2YtdHlwZSgxKSxcbiAgICAgICAgJjpudGgtb2YtdHlwZSgyKSxcbiAgICAgICAgJjpudGgtb2YtdHlwZSgzKSB7XG4gICAgICAgICAgICB6LWluZGV4OiA2MDtcbiAgICAgICAgICAgICR7cmV2ZWFsXG4gICAgICAgICAgICAgICAgPyBgXG4gICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAke3RyYW5zaXRpb25zLmR1cmF0aW9uLmNvbXBsZXh9bXMgJHt0cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0UXVpbnR9IGZvcndhcmRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICR7c2xpZGVJbkZpcnN0Um93fTtcbiAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6ICcnfVxuICAgICAgICB9XG5cbiAgICAgICAgJjpudGgtb2YtdHlwZSg0KSxcbiAgICAgICAgJjpudGgtb2YtdHlwZSg1KSxcbiAgICAgICAgJjpudGgtb2YtdHlwZSg2KSB7XG4gICAgICAgICAgICB6LWluZGV4OiA1MDtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMzUlKSByb3RhdGUoLTYwZGVnKSBza2V3WSgzMGRlZyk7XG4gICAgICAgICAgICAke3JldmVhbFxuICAgICAgICAgICAgICAgID8gY3NzYFxuICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogJHt0cmFuc2l0aW9ucy5kdXJhdGlvbi5jb21wbGV4fW1zICR7dHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dFF1aW50fSBmb3J3YXJkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAke3NsaWRlSW5TZWNvbmRSb3d9O1xuICAgICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIDogJyd9XG4gICAgICAgIH1cblxuICAgICAgICAmOm50aC1vZi10eXBlKDcpLFxuICAgICAgICAmOm50aC1vZi10eXBlKDgpLFxuICAgICAgICAmOm50aC1vZi10eXBlKDkpIHtcbiAgICAgICAgICAgIHotaW5kZXg6IDQwO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTIlLCAtNzAlKSByb3RhdGUoLTYwZGVnKSBza2V3WSgzMGRlZyk7XG4gICAgICAgICAgICAke3JldmVhbFxuICAgICAgICAgICAgICAgID8gY3NzYFxuICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogJHt0cmFuc2l0aW9ucy5kdXJhdGlvbi5jb21wbGV4fW1zICR7dHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dFF1aW50fSBmb3J3YXJkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAke3NsaWRlSW5GaXJzdFJvd307XG4gICAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgOiAnJ31cbiAgICAgICAgfVxuXG4gICAgICAgICY6bnRoLW9mLXR5cGUoMTApLFxuICAgICAgICAmOm50aC1vZi10eXBlKDExKSxcbiAgICAgICAgJjpudGgtb2YtdHlwZSgxMikge1xuICAgICAgICAgICAgei1pbmRleDogMzA7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwNSUpIHJvdGF0ZSgtNjBkZWcpIHNrZXdZKDMwZGVnKTtcbiAgICAgICAgICAgICR7cmV2ZWFsXG4gICAgICAgICAgICAgICAgPyBjc3NgXG4gICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAke3RyYW5zaXRpb25zLmR1cmF0aW9uLmNvbXBsZXh9bXMgJHt0cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0UXVpbnR9IGZvcndhcmRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICR7c2xpZGVJbkZpcnN0Um93fTtcbiAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6ICcnfVxuICAgICAgICB9XG5cbiAgICAgICAgJjpudGgtb2YtdHlwZSgxMyksXG4gICAgICAgICY6bnRoLW9mLXR5cGUoMTQpLFxuICAgICAgICAmOm50aC1vZi10eXBlKDE1KSB7XG4gICAgICAgICAgICB6LWluZGV4OiAyMDtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC0yJSwgLTE0MCUpIHJvdGF0ZSgtNjBkZWcpIHNrZXdZKDMwZGVnKTtcbiAgICAgICAgICAgICR7cmV2ZWFsXG4gICAgICAgICAgICAgICAgPyBjc3NgXG4gICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAke3RyYW5zaXRpb25zLmR1cmF0aW9uLmNvbXBsZXh9bXMgJHt0cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0UXVpbnR9IGZvcndhcmRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICR7c2xpZGVJbkZpcnN0Um93fTtcbiAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6ICcnfVxuICAgICAgICB9XG5cbiAgICAgICAgJjpudGgtb2YtdHlwZSgxNiksXG4gICAgICAgICY6bnRoLW9mLXR5cGUoMTcpLFxuICAgICAgICAmOm50aC1vZi10eXBlKDE4KSB7XG4gICAgICAgICAgICB6LWluZGV4OiAxMDtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTc1JSkgcm90YXRlKC02MGRlZykgc2tld1koMzBkZWcpO1xuICAgICAgICAgICAgJHtyZXZlYWxcbiAgICAgICAgICAgICAgICA/IGNzc2BcbiAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb246ICR7dHJhbnNpdGlvbnMuZHVyYXRpb24uY29tcGxleH1tcyAke3RyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXRRdWludH0gZm9yd2FyZHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJHtzbGlkZUluU2Vjb25kUm93fTtcbiAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6ICcnfVxuICAgICAgICB9XG4gICAgYH1cbmA7XG5cbmNvbnN0IHNsaWRlSW5GaXJzdFJvdyA9IGtleWZyYW1lc2BcbiAgICAvLyAwJSB7XG4gICAgLy8gICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC0yJSwgMTA1JSkgcm90YXRlKC02MGRlZykgc2tld1koMzBkZWcpO1xuICAgIC8vIH1cblxuICAgIDEwMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNTAlKSByb3RhdGUoLTYwZGVnKSBza2V3WSgzMGRlZyk7XG4gICAgfVxuYDtcblxuY29uc3Qgc2xpZGVJblNlY29uZFJvdyA9IGtleWZyYW1lc2BcbiAgICAvLyAwJSB7XG4gICAgLy8gICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAlLCA3MCUpIHJvdGF0ZSgtNjBkZWcpIHNrZXdZKDMwZGVnKTtcbiAgICAvLyB9XG5cbiAgICAxMDAlIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTYwZGVnKSBza2V3WSgzMGRlZyk7XG4gICAgfVxuYDtcblxuY29uc3Qgc2xpZGVJblRoaXJkUm93ID0ga2V5ZnJhbWVzYFxuICAgIC8vIGZyb20ge1xuICAgIC8vICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMiUsIDM1JSkgcm90YXRlKC02MGRlZykgc2tld1koMzBkZWcpO1xuICAgIC8vIH1cblxuICAgIHRvIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDUwJSkgcm90YXRlKC02MGRlZykgc2tld1koMzBkZWcpO1xuICAgIH1cbmA7XG5cbmNvbnN0IEhleGFnb25Jbm5lciA9IHN0eWxlZC5kaXZgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0cmFuc2Zvcm06IHNrZXdZKC0zMGRlZykgcm90YXRlKDYwZGVnKTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGJhY2tncm91bmQ6IG5vbmU7XG5gO1xuXG5jb25zdCBMaWQgPSBzdHlsZWQuZGl2YFxuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDAlO1xuICAgIGxlZnQ6IDc1JTtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1LCAyNSwgMjUsIDAuNyk7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjZGRiZjZkLCAjYzM5ZDU0LCAjYTk3YjNkLCAjOGQ1YzI4LCAjNzEzZTE1KTtcblxuICAgIGNvbG9yOiAjZmZmO1xuICAgIHotaW5kZXg6IDEwO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDAlKTtcbiAgICB3aWR0aDogNTAlO1xuICAgIGhlaWdodDogNTAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB3b3JkLWJyZWFrOiBicmVhay13b3JkO1xuICAgIHBhZGRpbmctdG9wOiA1JTtcbiAgICBAbWVkaWEgKCR7KHsgdGhlbWUgfSkgPT4gdGhlbWUubWVkaWFRdWVyaWVzLnN9KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMC42MXJlbTtcbiAgICB9XG4gICAgZmlsdGVyOiBvcGFjaXR5KDAuOSk7XG5gO1xuXG5jb25zdCBCb3hTaWRlID0gc3R5bGVkLmRpdmBcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwJTtcbiAgICBsZWZ0OiA3NSU7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgI2RkYmY2ZCwgI2MzOWQ1NCwgI2E5N2IzZCwgIzhkNWMyOCwgIzcxM2UxNSk7XG4gICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgei1pbmRleDogMTA7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTI1JSwgMTAwJSkgc2tldygwZGVnLCAtMzBkZWcpO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgdG9wO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogNTAlO1xuICAgIG9wYWNpdHk6IDAuNztcbmA7XG5cbmNvbnN0IFRhcGUgPSBzdHlsZWQuZGl2YFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDI1JTtcbiAgICBsZWZ0OiA3NSU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsYSgwLCAwJSwgMTAwJSwgMC4yKTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMWVtIDAuNWVtIGhzbGEoMCwgMCUsIDEwMCUsIDAuMSk7XG4gICAgaGVpZ2h0OiAycmVtO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgIHdpZHRoOiA0NyU7XG4gICAgZmlsdGVyOiBkcm9wLXNoYWRvdygwIDFweCAxcHggaHNsYSgwLCAwJSwgMCUsIDAuMykpO1xuICAgIHotaW5kZXg6IDEwO1xuXG4gICAgQG1lZGlhICgkeyh7IHRoZW1lIH0pID0+IHRoZW1lLm1lZGlhUXVlcmllcy5tfSkge1xuICAgICAgICBoZWlnaHQ6IDFyZW07XG4gICAgfVxuXG4gICAgJjo6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB9XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDAuNGVtIDAuNGVtO1xuICAgICAgICBib3R0b206IDA7XG4gICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgd2lkdGg6IDAuMnJlbTtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgdHJhbnNwYXJlbnQgNTAlLCBoc2xhKDAsIDAlLCAxMDAlLCAwLjMpIDUwJSksXG4gICAgICAgICAgICBsaW5lYXItZ3JhZGllbnQoLTEzNWRlZywgdHJhbnNwYXJlbnQgNTAlLCBoc2xhKDAsIDAlLCAxMDAlLCAwLjMpIDUwJSk7XG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDEwMCUgMTAwJTtcbiAgICAgICAgcmlnaHQ6IC0wLjJyZW07XG4gICAgfVxuYDtcbiJdfQ== */")) : '', "}&:nth-of-type(13),&:nth-of-type(14),&:nth-of-type(15){z-index:20;transform:translate(-2%,-140%) rotate(-60deg) skewY(30deg);", reveal ? /*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["css"])("animation:", transitions.duration.complex, "ms ", transitions.easing.easeInOutQuint, " forwards ", slideInFirstRow, ";;label:HexagonListItem;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")) : '', "}&:nth-of-type(16),&:nth-of-type(17),&:nth-of-type(18){z-index:10;transform:translateY(-175%) rotate(-60deg) skewY(30deg);", reveal ? /*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["css"])("animation:", transitions.duration.complex, "ms ", transitions.easing.easeInOutQuint, " forwards ", slideInSecondRow, ";;label:HexagonListItem;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")) : '', "};label:HexagonListItem;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
},  false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

var slideInFirstRow = Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["keyframes"])(_templateObject());
var slideInSecondRow = Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["keyframes"])(_templateObject2());
var slideInThirdRow = Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__["keyframes"])(_templateObject3());

var HexagonInner = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_4__["default"])("div", {
  target: "e1bqulo11",
  label: "HexagonInner"
})( false ? undefined : {
  name: "zwiov",
  styles: "position:absolute;top:0;left:0;height:100%;width:100%;transform:skewY(-30deg) rotate(60deg);overflow:hidden;background:none;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Lid = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_4__["default"])("div", {
  target: "e1bqulo12",
  label: "Lid"
})("font-size:1.5rem;position:absolute;top:0%;left:75%;background:rgba(25,25,25,0.7);background-image:linear-gradient(to right,#ddbf6d,#c39d54,#a97b3d,#8d5c28,#713e15);color:#fff;z-index:10;transform:translate(-50%,0%);width:50%;height:50%;text-align:center;word-break:break-word;padding-top:5%;@media (", function (_ref3) {
  var theme = _ref3.theme;
  return theme.mediaQueries.s;
}, "){font-size:0.61rem;}filter:opacity(0.9);" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var BoxSide = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_4__["default"])("div", {
  target: "e1bqulo13",
  label: "BoxSide"
})( false ? undefined : {
  name: "r1zteg",
  styles: "position:absolute;top:0%;left:75%;background-image:linear-gradient(to bottom,#ddbf6d,#c39d54,#a97b3d,#8d5c28,#713e15);padding:5px 10px;z-index:10;transform:translate(-25%,100%) skew(0deg,-30deg);transform-origin:left top;width:100%;height:50%;opacity:0.7;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var Tape = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_4__["default"])("div", {
  target: "e1bqulo14",
  label: "Tape"
})("position:absolute;top:25%;left:75%;background-color:hsla(0,0%,100%,0.2);box-shadow:inset 0 0 1em 0.5em hsla(0,0%,100%,0.1);height:2rem;transform:translate(-50%,-50%);width:47%;filter:drop-shadow(0 1px 1px hsla(0,0%,0%,0.3));z-index:10;@media (", function (_ref4) {
  var theme = _ref4.theme;
  return theme.mediaQueries.m;
}, "){height:1rem;}&::after{content:'';position:absolute;top:50%;left:0;background:rgba(0,0,0,0.1);width:100%;height:1px;transform:translateY(-50%);}&::before{background-size:0.4em 0.4em;bottom:0;content:'';position:absolute;top:0;width:0.2rem;background-image:linear-gradient(135deg,transparent 50%,hsla(0,0%,100%,0.3) 50%),linear-gradient(-135deg,transparent 50%,hsla(0,0%,100%,0.3) 50%);background-position:100% 100%;right:-0.2rem;}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

;

(function () {
  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(Hexagon, "Hexagon", "/Users/specificityy/Projects/kaizen-farms/src/components/Hexagon.js");
  reactHotLoader.register(HexagonListItem, "HexagonListItem", "/Users/specificityy/Projects/kaizen-farms/src/components/Hexagon.js");
  reactHotLoader.register(slideInFirstRow, "slideInFirstRow", "/Users/specificityy/Projects/kaizen-farms/src/components/Hexagon.js");
  reactHotLoader.register(slideInSecondRow, "slideInSecondRow", "/Users/specificityy/Projects/kaizen-farms/src/components/Hexagon.js");
  reactHotLoader.register(slideInThirdRow, "slideInThirdRow", "/Users/specificityy/Projects/kaizen-farms/src/components/Hexagon.js");
  reactHotLoader.register(HexagonInner, "HexagonInner", "/Users/specificityy/Projects/kaizen-farms/src/components/Hexagon.js");
  reactHotLoader.register(Lid, "Lid", "/Users/specificityy/Projects/kaizen-farms/src/components/Hexagon.js");
  reactHotLoader.register(BoxSide, "BoxSide", "/Users/specificityy/Projects/kaizen-farms/src/components/Hexagon.js");
  reactHotLoader.register(Tape, "Tape", "/Users/specificityy/Projects/kaizen-farms/src/components/Hexagon.js");
})();

;

(function () {
  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;
  leaveModule && leaveModule(module);
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=cms.c18b0b5b83ba13a5f35c.hot-update.js.map