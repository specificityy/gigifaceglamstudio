webpackHotUpdate("cms",{

/***/ "./src/templates/products-page.js":
/*!****************************************!*\
  !*** ./src/templates/products-page.js ***!
  \****************************************/
/*! exports provided: ProductsPageTemplate, productsPageQuery, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProductsPageTemplate", function() { return ProductsPageTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "productsPageQuery", function() { return productsPageQuery; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/styled-base */ "./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var emotion_theming__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! emotion-theming */ "./node_modules/emotion-theming/dist/emotion-theming.browser.esm.js");
/* harmony import */ var lodash_kebabCase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/kebabCase */ "./node_modules/lodash/kebabCase.js");
/* harmony import */ var lodash_kebabCase__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_kebabCase__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/index.js");
/* harmony import */ var _components_PreviewCompatibleBackgroundImage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/PreviewCompatibleBackgroundImage */ "./src/components/PreviewCompatibleBackgroundImage.js");
/* harmony import */ var _components_Parallax__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/Parallax */ "./src/components/Parallax.js");
/* harmony import */ var _components_TextBlock__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../components/TextBlock */ "./src/components/TextBlock.js");
/* harmony import */ var _components_Hexagon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/Hexagon */ "./src/components/Hexagon.js");
/* harmony import */ var _components_theme__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/theme */ "./src/components/theme.js");
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");



var _this = undefined,
    _jsxFileName = "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js";

(function () {
  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;
  enterModule && enterModule(module);
})();

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {
  return a;
};












var ProductsPageTemplate = function ProductsPageTemplate(_ref) {
  var pageName = _ref.pageName,
      heading = _ref.heading,
      subheading = _ref.subheading,
      description = _ref.description,
      products = _ref.products,
      backgroundProducts = _ref.backgroundProducts;
  var page = Object(react__WEBPACK_IMPORTED_MODULE_2__["useRef"])(null);

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_2__["useState"])(false),
      reveal = _useState[0],
      setReveal = _useState[1];

  Object(react__WEBPACK_IMPORTED_MODULE_2__["useEffect"])(function () {
    if (!page.current) return;
    var options = {
      rootMargin: '0px',
      threshold: 0.6
    };

    var callback = function callback(entries, observer) {
      entries.forEach(function (entry) {
        if (entry.intersectionRatio > 0.5) {
          setReveal(true);
          observer.disconnect();
        }
      });
    };

    var observer = new IntersectionObserver(callback, options);
    observer.observe(page.current);
  }, [page]);
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(emotion_theming__WEBPACK_IMPORTED_MODULE_4__["ThemeProvider"], {
    theme: _components_theme__WEBPACK_IMPORTED_MODULE_11__["default"],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 9
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(MainParallaxGroup, {
    name: "prod-main-parallax-group",
    id: lodash_kebabCase__WEBPACK_IMPORTED_MODULE_5___default()(pageName),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 43,
      columnNumber: 13
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(ProductsLayer, {
    variant: "base",
    name: "text-and-products-parallax-layer",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 44,
      columnNumber: 17
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(_components_TextBlock__WEBPACK_IMPORTED_MODULE_9__["TextBlock"], {
    name: "text-wrapper",
    heading: heading,
    subheading: subheading,
    description: description,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 45,
      columnNumber: 21
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(ProdList, {
    ref: page,
    name: "products-grid",
    id: "hex-grid",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 51,
      columnNumber: 21
    }
  }, products.concat(products.slice(3)).map(function (_ref2) {
    var title = _ref2.title,
        image = _ref2.image;
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(Product, {
      key: Object(uuid__WEBPACK_IMPORTED_MODULE_6__["v4"])(),
      reveal: reveal,
      name: title,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 53,
        columnNumber: 29
      }
    }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(ProdImage, {
      imageInfo: image,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 54,
        columnNumber: 33
      }
    }));
  }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(HeroBackgroundLayer, {
    name: "products-hero-background",
    variant: "back",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 59,
      columnNumber: 17
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(OverlayShade, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 60,
      columnNumber: 21
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(BackgroundImage, {
    imageInfo: backgroundProducts,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 61,
      columnNumber: 21
    }
  }))));
};

__signature__(ProductsPageTemplate, "useRef{page}\nuseState{[reveal, setReveal](false)}\nuseEffect{}");

var MainParallaxGroup = /*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])(_components_Parallax__WEBPACK_IMPORTED_MODULE_8__["ParallaxGroup"], {
  target: "e1wmd7cb0",
  label: "MainParallaxGroup"
})( false ? undefined : {
  name: "bd3syd",
  styles: "height:300vh;min-height:1800px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var ProductsLayer = /*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])(_components_Parallax__WEBPACK_IMPORTED_MODULE_8__["ParallaxLayer"], {
  target: "e1wmd7cb1",
  label: "ProductsLayer"
})("color:black;padding-bottom:10rem;background:white;height:fit-content;display:flex;align-items:center;min-height:100vh;@media (", function (_ref3) {
  var theme = _ref3.theme;
  return theme.mediaQueries.l;
}, "){height:fit-content;display:block;padding-bottom:3rem;min-height:440px;}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var HeroBackgroundLayer = /*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])(_components_Parallax__WEBPACK_IMPORTED_MODULE_8__["ParallaxLayer"], {
  target: "e1wmd7cb2",
  label: "HeroBackgroundLayer"
})( false ? undefined : {
  name: "yvjke4",
  styles: "top:50%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var BackgroundImage = /*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])(_components_PreviewCompatibleBackgroundImage__WEBPACK_IMPORTED_MODULE_7__["PreviewCompatibleBackgroundImage"], {
  target: "e1wmd7cb3",
  label: "BackgroundImage"
})( false ? undefined : {
  name: "1p6f1v0",
  styles: "width:100%;height:100%;background-position:center;background-repeat:no-repeat;background-size:cover;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var OverlayShade = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])("div", {
  target: "e1wmd7cb4",
  label: "OverlayShade"
})( false ? undefined : {
  name: "12l8yk5",
  styles: "position:absolute;top:0;left:0;display:block;width:100%;height:100%;z-index:10;background:rgba(20,25,30,0.3);",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var ProdList = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])("ul", {
  target: "e1wmd7cb5",
  label: "ProdList"
})("width:100%;height:fit-content;max-width:1450px;margin:100px 50px 100px 0;padding:20px 2% 55px 2%;overflow:hidden;background:white;flex:1 0 60%;@media (", function (_ref4) {
  var theme = _ref4.theme;
  return theme.mediaQueries.l;
}, "){width:90%;margin:0 auto;}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var Product = /*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])(_components_Hexagon__WEBPACK_IMPORTED_MODULE_10__["Hexagon"], {
  target: "e1wmd7cb6",
  label: "Product"
})( false ? undefined : {
  name: "1xzsvtk",
  styles: "box-shadow:0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12);",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcGVjaWZpY2l0eXkvUHJvamVjdHMva2FpemVuLWZhcm1zL3NyYy90ZW1wbGF0ZXMvcHJvZHVjdHMtcGFnZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4SCtCIiwiZmlsZSI6Ii9Vc2Vycy9zcGVjaWZpY2l0eXkvUHJvamVjdHMva2FpemVuLWZhcm1zL3NyYy90ZW1wbGF0ZXMvcHJvZHVjdHMtcGFnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ3JhcGhxbCB9IGZyb20gJ2dhdHNieSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIH0gZnJvbSAnZW1vdGlvbi10aGVtaW5nJztcbmltcG9ydCBrZWJhYkNhc2UgZnJvbSAnbG9kYXNoL2tlYmFiQ2FzZSc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcblxuaW1wb3J0IHsgUHJldmlld0NvbXBhdGlibGVCYWNrZ3JvdW5kSW1hZ2UgfSBmcm9tICcuLi9jb21wb25lbnRzL1ByZXZpZXdDb21wYXRpYmxlQmFja2dyb3VuZEltYWdlJztcbmltcG9ydCB7IFBhcmFsbGF4R3JvdXAsIFBhcmFsbGF4TGF5ZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL1BhcmFsbGF4JztcbmltcG9ydCB7IFRleHRCbG9jayB9IGZyb20gJy4uL2NvbXBvbmVudHMvVGV4dEJsb2NrJztcbmltcG9ydCB7IEhleGFnb24gfSBmcm9tICcuLi9jb21wb25lbnRzL0hleGFnb24nO1xuaW1wb3J0IHRoZW1lIGZyb20gJy4uL2NvbXBvbmVudHMvdGhlbWUnO1xuXG5leHBvcnQgY29uc3QgUHJvZHVjdHNQYWdlVGVtcGxhdGUgPSAoeyBwYWdlTmFtZSwgaGVhZGluZywgc3ViaGVhZGluZywgZGVzY3JpcHRpb24sIHByb2R1Y3RzLCBiYWNrZ3JvdW5kUHJvZHVjdHMgfSkgPT4ge1xuICAgIGNvbnN0IHBhZ2UgPSB1c2VSZWYobnVsbCk7XG4gICAgY29uc3QgW3JldmVhbCwgc2V0UmV2ZWFsXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghcGFnZS5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJvb3RNYXJnaW46ICcwcHgnLFxuICAgICAgICAgICAgdGhyZXNob2xkOiAwLjYsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gMC41KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFJldmVhbCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGNhbGxiYWNrLCBvcHRpb25zKTtcblxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHBhZ2UuY3VycmVudCk7XG4gICAgfSwgW3BhZ2VdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0+XG4gICAgICAgICAgICA8TWFpblBhcmFsbGF4R3JvdXAgbmFtZT1cInByb2QtbWFpbi1wYXJhbGxheC1ncm91cFwiIGlkPXtrZWJhYkNhc2UocGFnZU5hbWUpfT5cbiAgICAgICAgICAgICAgICA8UHJvZHVjdHNMYXllciB2YXJpYW50PVwiYmFzZVwiIG5hbWU9XCJ0ZXh0LWFuZC1wcm9kdWN0cy1wYXJhbGxheC1sYXllclwiPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dEJsb2NrXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidGV4dC13cmFwcGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRpbmc9e2hlYWRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJoZWFkaW5nPXtzdWJoZWFkaW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb249e2Rlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8UHJvZExpc3QgcmVmPXtwYWdlfSBuYW1lPVwicHJvZHVjdHMtZ3JpZFwiIGlkPVwiaGV4LWdyaWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9kdWN0cy5jb25jYXQocHJvZHVjdHMuc2xpY2UoMykpLm1hcCgoeyB0aXRsZSwgaW1hZ2UgfSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9kdWN0IGtleT17dXVpZHY0KCl9IHJldmVhbD17cmV2ZWFsfSBuYW1lPXt0aXRsZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9kSW1hZ2UgaW1hZ2VJbmZvPXtpbWFnZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1Byb2R1Y3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgPC9Qcm9kTGlzdD5cbiAgICAgICAgICAgICAgICA8L1Byb2R1Y3RzTGF5ZXI+XG4gICAgICAgICAgICAgICAgPEhlcm9CYWNrZ3JvdW5kTGF5ZXIgbmFtZT1cInByb2R1Y3RzLWhlcm8tYmFja2dyb3VuZFwiIHZhcmlhbnQ9XCJiYWNrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPdmVybGF5U2hhZGUgLz5cbiAgICAgICAgICAgICAgICAgICAgPEJhY2tncm91bmRJbWFnZSBpbWFnZUluZm89e2JhY2tncm91bmRQcm9kdWN0c30gLz5cbiAgICAgICAgICAgICAgICA8L0hlcm9CYWNrZ3JvdW5kTGF5ZXI+XG4gICAgICAgICAgICA8L01haW5QYXJhbGxheEdyb3VwPlxuICAgICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgKTtcbn07XG5cbmNvbnN0IE1haW5QYXJhbGxheEdyb3VwID0gc3R5bGVkKFBhcmFsbGF4R3JvdXApYFxuICAgIGhlaWdodDogMzAwdmg7XG4gICAgbWluLWhlaWdodDogMTgwMHB4O1xuYDtcblxuY29uc3QgUHJvZHVjdHNMYXllciA9IHN0eWxlZChQYXJhbGxheExheWVyKWBcbiAgICBjb2xvcjogYmxhY2s7XG4gICAgcGFkZGluZy1ib3R0b206IDEwcmVtO1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICAgIEBtZWRpYSAoJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5tZWRpYVF1ZXJpZXMubH0pIHtcbiAgICAgICAgaGVpZ2h0OiBmaXQtY29udGVudDtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAzcmVtO1xuICAgICAgICBtaW4taGVpZ2h0OiA0NDBweDtcbiAgICB9XG5gO1xuXG5jb25zdCBIZXJvQmFja2dyb3VuZExheWVyID0gc3R5bGVkKFBhcmFsbGF4TGF5ZXIpYFxuICAgIHRvcDogNTAlO1xuYDtcblxuY29uc3QgQmFja2dyb3VuZEltYWdlID0gc3R5bGVkKFByZXZpZXdDb21wYXRpYmxlQmFja2dyb3VuZEltYWdlKWBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbmA7XG5cbmNvbnN0IE92ZXJsYXlTaGFkZSA9IHN0eWxlZC5kaXZgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB6LWluZGV4OiAxMDtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDIwLCAyNSwgMzAsIDAuMyk7XG5gO1xuXG5jb25zdCBQcm9kTGlzdCA9IHN0eWxlZC51bGBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICAgIG1heC13aWR0aDogMTQ1MHB4O1xuICAgIG1hcmdpbjogMTAwcHggNTBweCAxMDBweCAwO1xuICAgIHBhZGRpbmc6IDIwcHggMiUgNTVweCAyJTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIGZsZXg6IDEgMCA2MCU7XG4gICAgQG1lZGlhICgkeyh7IHRoZW1lIH0pID0+IHRoZW1lLm1lZGlhUXVlcmllcy5sfSkge1xuICAgICAgICB3aWR0aDogOTAlO1xuICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICB9XG5gO1xuXG5jb25zdCBQcm9kdWN0ID0gc3R5bGVkKEhleGFnb24pYFxuICAgIGJveC1zaGFkb3c6IDBweCA5cHggMTFweCAtNXB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDE4cHggMjhweCAycHggcmdiYSgwLCAwLCAwLCAwLjE0KSxcbiAgICAgICAgMHB4IDdweCAzNHB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xuYDtcblxuY29uc3QgUHJvZEltYWdlID0gc3R5bGVkKFByZXZpZXdDb21wYXRpYmxlQmFja2dyb3VuZEltYWdlKWBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTAlIDYwJTtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgcGFkZGluZzogNXB4O1xuYDtcblxuY29uc3QgUHJvZHVjdHNQYWdlID0gKHsgZGF0YSB9KSA9PiB7XG4gICAgY29uc3QgeyBmcm9udG1hdHRlciB9ID0gZGF0YS5tYXJrZG93blJlbWFyaztcbiAgICByZXR1cm4gPFByb2R1Y3RzUGFnZVRlbXBsYXRlIHsuLi5mcm9udG1hdHRlcn0gLz47XG59O1xuXG5leHBvcnQgY29uc3QgcHJvZHVjdHNQYWdlUXVlcnkgPSBncmFwaHFsYFxuICAgIHF1ZXJ5IFByb2R1Y3RzUGFnZSgkaWQ6IFN0cmluZyEpIHtcbiAgICAgICAgbWFya2Rvd25SZW1hcmsoaWQ6IHsgZXE6ICRpZCB9KSB7XG4gICAgICAgICAgICBmcm9udG1hdHRlciB7XG4gICAgICAgICAgICAgICAgcGFnZU5hbWVcbiAgICAgICAgICAgICAgICBoZWFkaW5nXG4gICAgICAgICAgICAgICAgc3ViaGVhZGluZ1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFByb2R1Y3RzIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRJbWFnZVNoYXJwIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsdWlkKG1heFdpZHRoOiAyMDAwLCBxdWFsaXR5OiA1MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLkdhdHNieUltYWdlU2hhcnBGbHVpZFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb2R1Y3RzIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRJbWFnZVNoYXJwIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbHVpZChtYXhXaWR0aDogNTAwLCBxdWFsaXR5OiAzMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5HYXRzYnlJbWFnZVNoYXJwRmx1aWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5gO1xuXG5Qcm9kdWN0c1BhZ2UucHJvcFR5cGVzID0ge1xuICAgIGRhdGE6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIG1hcmtkb3duUmVtYXJrOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgZnJvbnRtYXR0ZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgIH0pLFxuICAgIH0pLFxufTtcblxuUHJvZHVjdHNQYWdlVGVtcGxhdGUucHJvcFR5cGVzID0ge1xuICAgIHBhZ2VOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhlYWRpbmc6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3ViaGVhZGluZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZXNjcmlwdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBwcm9kdWN0czogUHJvcFR5cGVzLmFycmF5LFxuICAgIGJhY2tncm91bmRQcm9kdWN0czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdHNQYWdlO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var ProdImage = /*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_1__["default"])(_components_PreviewCompatibleBackgroundImage__WEBPACK_IMPORTED_MODULE_7__["PreviewCompatibleBackgroundImage"], {
  target: "e1wmd7cb7",
  label: "ProdImage"
})( false ? undefined : {
  name: "1mvpys2",
  styles: "width:100%;height:100%;background-position:50% 60%;background-repeat:no-repeat;background-size:cover;padding:5px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var ProductsPage = function ProductsPage(_ref5) {
  var data = _ref5.data;
  var frontmatter = data.markdownRemark.frontmatter;
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__["jsx"])(ProductsPageTemplate, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, frontmatter, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 143,
      columnNumber: 12
    }
  }));
};

var productsPageQuery = "155567950";
ProductsPage.propTypes = {
  data: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.shape({
    markdownRemark: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.shape({
      frontmatter: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object
    })
  })
};
ProductsPageTemplate.propTypes = {
  pageName: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  heading: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  subheading: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  description: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
  products: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.array,
  backgroundProducts: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string])
};
var _default = ProductsPage;
/* harmony default export */ __webpack_exports__["default"] = (_default);
;

(function () {
  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(ProductsPageTemplate, "ProductsPageTemplate", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(MainParallaxGroup, "MainParallaxGroup", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(ProductsLayer, "ProductsLayer", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(HeroBackgroundLayer, "HeroBackgroundLayer", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(BackgroundImage, "BackgroundImage", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(OverlayShade, "OverlayShade", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(ProdList, "ProdList", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(Product, "Product", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(ProdImage, "ProdImage", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(ProductsPage, "ProductsPage", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(productsPageQuery, "productsPageQuery", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
  reactHotLoader.register(_default, "default", "/Users/specificityy/Projects/kaizen-farms/src/templates/products-page.js");
})();

;

(function () {
  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;
  leaveModule && leaveModule(module);
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=cms.7bd0fca221a28d53525c.hot-update.js.map