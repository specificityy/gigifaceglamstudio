{"version":3,"file":"cms.ba91946e8b3b98880d59.hot-update.js","sources":["webpack:///./src/templates/products-page.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from 'emotion-theming';\nimport kebabCase from 'lodash/kebabCase';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { PreviewCompatibleBackgroundImage } from '../components/PreviewCompatibleBackgroundImage';\nimport { ParallaxGroup, ParallaxLayer } from '../components/Parallax';\nimport { TextBlock } from '../components/TextBlock';\nimport { Hexagon } from '../components/Hexagon';\nimport theme from '../components/theme';\n\nexport const ProductsPageTemplate = ({ pageName, heading, subheading, description, products, backgroundProducts }) => {\n    const page = useRef(null);\n    const [reveal, setReveal] = useState(false);\n\n    useEffect(() => {\n        if (!page.current) return;\n\n        const options = {\n            rootMargin: '0px',\n            threshold: 0.6,\n        };\n\n        const callback = (entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.intersectionRatio > 0.5) {\n                    setReveal(true);\n                    observer.disconnect();\n                }\n            });\n        };\n\n        const observer = new IntersectionObserver(callback, options);\n\n        observer.observe(page.current);\n    }, [page]);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <MainParallaxGroup name=\"prod-main-parallax-group\" id={kebabCase(pageName)}>\n                <ProductsLayer variant=\"base\" name=\"text-and-products-parallax-layer\">\n                    <TextBlock\n                        name=\"text-wrapper\"\n                        heading={heading}\n                        subheading={subheading}\n                        description={description}\n                    />\n                    <ProdList ref={page} name=\"products-grid\" id=\"hex-grid\">\n                        {products.concat(products.slice(3)).map(({ title, image }) => (\n                            <Product key={uuidv4()} reveal={reveal} name={title}>\n                                <ProdImage imageInfo={image} />\n                            </Product>\n                        ))}\n                    </ProdList>\n                </ProductsLayer>\n                <HeroBackgroundLayer name=\"products-hero-background\" variant=\"back\">\n                    <OverlayShade />\n                    <BackgroundImage imageInfo={backgroundProducts} />\n                </HeroBackgroundLayer>\n            </MainParallaxGroup>\n        </ThemeProvider>\n    );\n};\n\nconst MainParallaxGroup = styled(ParallaxGroup)`\n    height: 250vh;\n    min-height: 1800px;\n`;\n\nconst ProductsLayer = styled(ParallaxLayer)`\n    color: black;\n    padding-bottom: 10rem;\n    background: white;\n    height: max-content;\n    display: flex;\n    align-items: center;\n    min-height: 100vh;\n    @media (${({ theme }) => theme.mediaQueries.l}) {\n        height: max-content;\n        display: block;\n        padding-bottom: 3rem;\n        min-height: 440px;\n    }\n`;\n\nconst HeroBackgroundLayer = styled(ParallaxLayer)`\n    top: 75vh;\n`;\n\nconst BackgroundImage = styled(PreviewCompatibleBackgroundImage)`\n    width: 100%;\n    height: 100%;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n`;\n\nconst OverlayShade = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: block;\n    width: 100%;\n    height: 100%;\n    z-index: 10;\n    background: rgba(20, 25, 30, 0.3);\n`;\n\nconst ProdList = styled.ul`\n    width: 100%;\n    height: fit-content;\n    max-width: 1450px;\n    margin: 100px 50px 100px 0;\n    padding: 20px 2% 55px 2%;\n    overflow: hidden;\n    background: white;\n    flex: 1 0 60%;\n    @media (${({ theme }) => theme.mediaQueries.l}) {\n        width: 90%;\n        margin: 0 auto;\n    }\n`;\n\nconst Product = styled(Hexagon)`\n    box-shadow: 0px 9px 11px -5px rgba(0, 0, 0, 0.2), 0px 18px 28px 2px rgba(0, 0, 0, 0.14),\n        0px 7px 34px 6px rgba(0, 0, 0, 0.12);\n`;\n\nconst ProdImage = styled(PreviewCompatibleBackgroundImage)`\n    width: 100%;\n    height: 100%;\n    background-position: 50% 60%;\n    background-repeat: no-repeat;\n    background-size: cover;\n    padding: 5px;\n`;\n\nconst ProductsPage = ({ data }) => {\n    const { frontmatter } = data.markdownRemark;\n    return <ProductsPageTemplate {...frontmatter} />;\n};\n\nexport const productsPageQuery = graphql`\n    query ProductsPage($id: String!) {\n        markdownRemark(id: { eq: $id }) {\n            frontmatter {\n                pageName\n                heading\n                subheading\n                description\n                backgroundProducts {\n                    childImageSharp {\n                        fluid(maxWidth: 2000, quality: 50) {\n                            ...GatsbyImageSharpFluid\n                        }\n                    }\n                }\n                products {\n                    title\n                    image {\n                        childImageSharp {\n                            fluid(maxWidth: 500, quality: 30) {\n                                ...GatsbyImageSharpFluid\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nProductsPage.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.object,\n        }),\n    }),\n};\n\nProductsPageTemplate.propTypes = {\n    pageName: PropTypes.string,\n    heading: PropTypes.string,\n    subheading: PropTypes.string,\n    description: PropTypes.string,\n    products: PropTypes.array,\n    backgroundProducts: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n};\n\nexport default ProductsPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AApDA;AACA;AAolLA;AAqDA;AAKA;AAgBA;AAIA;AAQA;AAWA;AAeA;AAKA;AASA;AAKA;;;;;;;;;;;;;;A","sourceRoot":""}